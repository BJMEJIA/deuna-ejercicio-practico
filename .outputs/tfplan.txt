[0m[1mmodule.kms.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.kms.data.aws_caller_identity.current: Read complete after 0s [id=842675974385][0m
[0m[1mmodule.kms.data.aws_iam_policy_document.kms_policy: Reading...[0m[0m
[0m[1mmodule.kms.data.aws_iam_policy_document.kms_policy: Read complete after 0s [id=2886803126][0m
[0m[1mmodule.kms.aws_kms_key.kms_key: Refreshing state... [id=4175f904-083d-4230-9026-b282ca277978][0m
[0m[1mmodule.aurora-postgresql.aws_rds_cluster.postgresql: Refreshing state... [id=aurora-postgresql-deuna][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
  [33m~[0m update in-place[0m

Terraform will perform the following actions:

[1m  # module.aurora-postgresql.aws_rds_cluster.postgresql[0m will be updated in-place
[0m  [33m~[0m[0m resource "aws_rds_cluster" "postgresql" {
      [33m~[0m[0m enable_http_endpoint                  = true [33m->[0m[0m false
        id                                    = "aurora-postgresql-deuna"
        tags                                  = {
            "app" = "deuna"
            "env" = "development"
        }
        [90m# (57 unchanged attributes hidden)[0m[0m
    }

[1m  # module.aurora-postgresql.aws_rds_cluster_instance.cluster_instance[0][0m will be created
[0m  [32m+[0m[0m resource "aws_rds_cluster_instance" "cluster_instance" {
      [32m+[0m[0m apply_immediately                     = (known after apply)
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m cluster_identifier                    = "aurora-postgresql-deuna"
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m db_parameter_group_name               = (known after apply)
      [32m+[0m[0m db_subnet_group_name                  = (known after apply)
      [32m+[0m[0m dbi_resource_id                       = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "aurora-postgresql"
      [32m+[0m[0m engine_version                        = "16.6"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m force_destroy                         = false
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "aurora-postgresql-deuna-instance-1"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.r6g.large"
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m performance_insights_enabled          = (known after apply)
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m preferred_backup_window               = (known after apply)
      [32m+[0m[0m preferred_maintenance_window          = (known after apply)
      [32m+[0m[0m promotion_tier                        = 0
      [32m+[0m[0m publicly_accessible                   = (known after apply)
      [32m+[0m[0m storage_encrypted                     = (known after apply)
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "app" = "deuna"
          [32m+[0m[0m "env" = "development"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "app" = "deuna"
          [32m+[0m[0m "env" = "development"
        }
      [32m+[0m[0m writer                                = (known after apply)
    }

[1m  # module.s3_bucket.aws_s3_bucket.s3_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "s3_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "deuna-iac-bucket"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "app" = "deuna"
          [32m+[0m[0m "env" = "development"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "app" = "deuna"
          [32m+[0m[0m "env" = "development"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # module.s3_bucket.aws_s3_bucket_object_lock_configuration.s3_object_lock[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_object_lock_configuration" "s3_object_lock" {
      [32m+[0m[0m bucket              = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m object_lock_enabled = "Enabled"

      [32m+[0m[0m rule {
          [32m+[0m[0m default_retention {
              [32m+[0m[0m days = 5
              [32m+[0m[0m mode = "COMPLIANCE"
            }
        }
    }

[1m  # module.s3_bucket.aws_s3_bucket_policy.ssl_only_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "ssl_only_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # module.s3_bucket.aws_s3_bucket_public_access_block.s3_public_block[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "s3_public_block" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # module.s3_bucket.aws_s3_bucket_server_side_encryption_configuration.s3_encryption[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "s3_encryption" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = "4175f904-083d-4230-9026-b282ca277978"
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.s3_bucket.aws_s3_bucket_versioning.s3_versioning[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "s3_versioning" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1mPlan:[0m 7 to add, 1 to change, 0 to destroy.
[0m[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
